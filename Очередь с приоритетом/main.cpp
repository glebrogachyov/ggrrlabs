    -#include <iostream>  
    -#include <iostream>  
    -#include <vector>  
    -#include <windows.h>  
    -using namespace std;  
    -  
    -class PriorityQueue  
    -{  
    -public:  
    -    void heapify(int i);  
    -    void push(int el); // Aiaaaeyao yeaiaio a i?a?aau  
    -    void pop();        // Oaaeyao aa?oiee yeaiaio ec i?a?aae  
    -    int top();         // Aica?auaao aa?oiee yeaiaio i?a?aae, ia oaaeyy aai  
    -private:  
    -    vector<int> queue;  
    -};  
    -  
    -void heapsort(vector<int> &vec);  
    -  
    -  
    -int main() {  
    -    SetConsoleCP(1251);  
    -    SetConsoleOutputCP(1251);  
    -    PriorityQueue a; // nicaaaony i?a?aau ec yeaiaioia <5,12,7,7,3>  
    -    a.push(6);  
    -    a.push(3);  
    -    a.push(19);  
    -    a.push(1);  
    -    a.push(12);  
    -    cout << "Aa?oeia iinea aiaaaeaiey 5:" << a.top() << endl;  
    -    a.pop();  
    -    cout << "Aa?oeia iinea oaaeaiey 1:" << a.top() << endl;  
    -    a.push(13);  
    -    a.push(10);  
    -    cout << "Aa?oeiaiinea aiaaaeaiey 2:" << a.top() << endl;  
    -    a.pop();  
    -    a.pop();  
    -    a.pop();  
    -    cout << "Aa?oeia iineaa oaaeaiey 3:" << a.top() << endl;  
    -  
    -    vector <int> vec; // nicaa?ony aaeoi? <5,4,6,3,2,8,2,29>  
    -    vec.push_back(5);  
    -    vec.push_back(4);  
    -    vec.push_back(6);  
    -    vec.push_back(3);  
    -    vec.push_back(2);  
    -    vec.push_back(8);  
    -    vec.push_back(2);  
    -    vec.push_back(29);  
    -  
    -    for (int i = 0; i < vec.size(); i++)  
    -        cout << vec [i]<< " ";  
    -    cout << endl;  
    -  
    -    heapsort(vec); //ni?oe?iaea aaeoi?a eo?ae  
    -  
    -    for (int i = 0; i < vec.size(); i++)  
    -        cout << vec [i]<< " ";  
    -  
    -    return 0;  
    -}  
    -  
    -void heapsort(vector<int> &vec) {  
    -    PriorityQueue tmp;  
    -    for (int i = 0; i < vec.size(); i++)  
    -        tmp.push(vec[i]);  
    -  
    -    for (int i = vec.size() - 1; i >= 0; i--)  
    -    {  
    -        vec[i] = tmp.top();  
    -        tmp.pop();  
    -        tmp.heapify(0);  
    -    };  
    -}  
    -  
    -  
    -  
    -  
    -  
    -void PriorityQueue::heapify(int i)  
    -{  
    -    int leftChild;  
    -    int rightChild;  
    -    int largestChild;  
    -  
    -    for ( ; ; )  
    -    {  
    -        leftChild = 2 * i + 1;  
    -        rightChild = 2 * i + 2;  
    -        largestChild = i;  
    -  
    -        if (leftChild < queue.size() && queue[leftChild] > queue[largestChild])  
    -        {  
    -            largestChild = leftChild;  
   -        }  
   -  
   -        if (rightChild < queue.size() && queue[rightChild] > queue[largestChild])  
   -        {  
   -            largestChild = rightChild;  
    -        }  
    -  
    -        if (largestChild == i)  
    -        {  
    -            break;  
    -        }  
    -  
    -        int temp = queue[i];  
    -        queue[i] = queue[largestChild];  
    -        queue[largestChild] = temp;  
    -        i = largestChild;  
    -    }  
    -}  
    -  
    -void PriorityQueue::push(int el)  // Aiaaaeyao yeaiaio a i?a?aau  
    -{  
    -    queue.push_back(el);  
    -    int i = queue.size()-1;  
    -    int parent = (i - 1) / 2;  
    -  
    -    while (i > 0 && queue[parent] < queue[i])  
    -    {  
    -        int temp = queue[i];  
    -        queue[i] = queue[parent];  
    -        queue[parent] = temp;  
    -  
    -        i = parent;  
    -        parent = (i - 1) / 2;  
    -    }  
    -}  
    -  
    -void PriorityQueue::pop()  // Oaaeyao aa?oiee yeaiaio ec i?a?aae  
    -{  
    -    if (queue.empty())  
    -        cerr << "Queue is empty.";  
    -    queue[0] = queue[queue.size()-1];  
    -    queue.pop_back();  
    -    heapify (0);  
    -}  
    -  
    -int PriorityQueue::top()  //Aica?auaao aa?oiee yeaiaio i?a?aae, ia oaaeyy aai  
    -{  
    -    if (queue.empty())  
    -        cerr << "Queue is empty.";  
    -    return queue.front();  
    -}  
